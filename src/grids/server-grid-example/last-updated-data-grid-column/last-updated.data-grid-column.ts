import { FormGroup } from '@angular/forms';
import { gettext } from '@c8y/ngx-components/gettext';
import { BaseColumn, ColumnConfig } from '@c8y/ngx-components';
import { LastUpdatedCellRendererComponent } from './last-updated.cell-renderer.component';

/**
 * Defines a class for custom Last updated date column.
 * Implements `Column` interface and sets basic properties, as well as custom components.
 */
export class LastUpdatedDataGridColumn extends BaseColumn {
  constructor(initialColumnConfig?: ColumnConfig) {
    super(initialColumnConfig);
    this.name = 'lastUpdated';
    this.path = 'lastUpdated';
    this.header = 'Last updated';

    this.cellRendererComponent = LastUpdatedCellRendererComponent;

    this.filterable = true;

    this.filteringConfig = {
      /**
       * When using Formly schema, filter chips can be automatically generated by the
       * data-grid library based on the filtering schema definition. You do not need
       * to manually implement the chip generation. The Formly field definitions provided
       * in the `filteringConfig` will automatically be transformed into chips by the
       * data-grid system.
       */
      fields: [
        {
          type: 'object',
          key: 'lastUpdated',
          templateOptions: {
            label: gettext('Show items last updated')
          },
          fieldGroup: [
            {
              type: 'date-time',
              key: 'after',
              templateOptions: {
                label: gettext('from')
              },
              expressionProperties: {
                'templateOptions.maxDate': (model: any) => model?.before
              }
            },
            {
              type: 'date-time',
              key: 'before',
              templateOptions: {
                label: gettext('to')
              },
              expressionProperties: {
                'templateOptions.minDate': (model: any) => model?.after
              }
            }
          ],
          validators: {
            atLeastOneFilled: {
              expression: (formGroup: any) => {
                const after = formGroup.get('after').value;
                const before = formGroup.get('before').value;
                return after || before;
              }
            }
          }
        }
      ],
      formGroup: new FormGroup({}),
      getFilter: model => {
        const filter: any = {};
        const dates = model?.lastUpdated;
        if (dates?.after || dates?.before) {
          filter.__and = [];
          if (dates?.after) {
            const after = this.formatDate(dates.after);
            filter.__and.push({
              'lastUpdated.date': { __gt: after }
            });
          }
          if (dates?.before) {
            const before = this.formatDate(dates.before);
            filter.__and.push({
              'lastUpdated.date': { __lt: before }
            });
          }
        }
        return filter;
      }
    };

    this.sortable = true;
    this.sortingConfig = {
      pathSortingConfigs: [{ path: 'lastUpdated.date' }]
    };
  }

  protected formatDate(dateToFormat: string): string {
    return new Date(dateToFormat).toISOString();
  }
}
